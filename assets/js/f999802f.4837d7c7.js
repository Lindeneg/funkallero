"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[130],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=s,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5383:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:5,description:"Time to create some contracts and some actions"},o="Actions",i={unversionedId:"part-1/actions",id:"part-1/actions",title:"Actions",description:"Time to create some contracts and some actions",source:"@site/docs/part-1/5-actions.md",sourceDirName:"part-1",slug:"/part-1/actions",permalink:"/funkallero/docs/part-1/actions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,description:"Time to create some contracts and some actions"},sidebar:"tutorialSidebar",previous:{title:"Data Context",permalink:"/funkallero/docs/part-1/data-context"},next:{title:"Controller",permalink:"/funkallero/docs/part-1/controllers"}},c={},p=[{value:"DTOs &amp; Response contracts",id:"dtos--response-contracts",level:2},{value:"src/contracts/get-user.ts",id:"srccontractsget-userts",level:6},{value:"src/contracts/create-user.ts",id:"srccontractscreate-userts",level:6},{value:"Create action files",id:"create-action-files",level:2},{value:"Write Business Logic",id:"write-business-logic",level:2},{value:"Get Users Query",id:"get-users-query",level:2},{value:"src/application/user/get-users-query.ts",id:"srcapplicationuserget-users-queryts",level:6},{value:"Get User Query",id:"get-user-query",level:2},{value:"src/application/user/get-user-query.ts",id:"srcapplicationuserget-user-queryts",level:6},{value:"Create User Command",id:"create-user-command",level:2},{value:"src/application/user/create-user-command.ts",id:"srcapplicationusercreate-user-commandts",level:6}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"actions"},"Actions"),(0,s.kt)("p",null,"Create three actions, ",(0,s.kt)("inlineCode",{parentName:"p"},"GetUserQuery"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"GetUsersQuery")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"CreateUserCommand"),". Two queries and a single command."),(0,s.kt)("h2",{id:"dtos--response-contracts"},"DTOs & Response contracts"),(0,s.kt)("p",null,"Firstly, make questions such as ",(0,s.kt)("em",{parentName:"p"},'"what is the shape of incoming data?"')," and ",(0,s.kt)("em",{parentName:"p"},'"what is the shape of outgoing data"')," be easily answered."),(0,s.kt)("p",null,"Later on we'll look at enforcing those contracts."),(0,s.kt)("h6",{id:"srccontractsget-userts"},"src/contracts/get-user.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import type User from '@/domain/user';\n\nexport interface IGetUserDto {\n    id: User['id'];\n}\n\nexport interface IGetUserResponse {\n    id: User['id'];\n    name: User['name'];\n}\n\nexport interface IGetUsersResponse {\n    users: IGetUserResponse[];\n}\n")),(0,s.kt)("h6",{id:"srccontractscreate-userts"},"src/contracts/create-user.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import type User from '@/domain/user';\n\nexport interface ICreateUserDto {\n    name: User['id'];\n    email: User['email'];\n}\n\nexport interface ICreateUserResponse {\n    id: User['id'];\n}\n")),(0,s.kt)("h2",{id:"create-action-files"},"Create action files"),(0,s.kt)("p",null,"Utilize CLI to create actions and automatically export them."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"funkallero query get users --folder user\n\nfunkallero query get user --folder user\n\nfunkallero command create user --folder user\n")),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"After running the above commands, open up ",(0,s.kt)("inlineCode",{parentName:"p"},"src/api/example-controller.ts")," and notice the type constraint\nof the first argument to ",(0,s.kt)("inlineCode",{parentName:"p"},"mediator.send")," already includes the new actions."),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},'this.mediator.send("NotApplicable");')),(0,s.kt)("p",{parentName:"admonition"},"Argument of type ",(0,s.kt)("inlineCode",{parentName:"p"},'"NotApplicable"')," is not assignable to parameter of type ",(0,s.kt)("inlineCode",{parentName:"p"},'"GetExamplesQuery" | "GetUsersQuery" | "GetUserQuery" | "CreateUserCommand"'),".")),(0,s.kt)("h2",{id:"write-business-logic"},"Write Business Logic"),(0,s.kt)("p",null,"Write some appropiate logic in new files."),(0,s.kt)("h2",{id:"get-users-query"},"Get Users Query"),(0,s.kt)("p",null,"Find all user entities, map them the response contract and return the result."),(0,s.kt)("h6",{id:"srcapplicationuserget-users-queryts"},"src/application/user/get-users-query.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { MediatorResultSuccess } from '@lindeneg/funkallero';\nimport BaseAction from '@/application/base-action';\nimport type { IGetUsersResponse } from '@/contracts/get-user';\n\nclass GetUsersQuery extends BaseAction {\n    public async execute() {\n        const users = Array.from(this.dataContext.userRepository.values());\n\n        const usersResponse: IGetUsersResponse = {\n            users: users.map((user) => ({\n                id: user.id,\n                name: user.name,\n            })),\n        };\n\n        return new MediatorResultSuccess(usersResponse);\n    }\n}\n\nexport default GetUsersQuery;\n")),(0,s.kt)("h2",{id:"get-user-query"},"Get User Query"),(0,s.kt)("p",null,"Find a user entity given an ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," and map it to the response contract."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"After updating the code as shown below, open up ",(0,s.kt)("inlineCode",{parentName:"p"},"src/api/example-controller.ts")," and notice that the type constraint\nof the second argument to ",(0,s.kt)("inlineCode",{parentName:"p"},"mediator.send")," on ",(0,s.kt)("inlineCode",{parentName:"p"},"GetUserQuery")," now is ",(0,s.kt)("inlineCode",{parentName:"p"},"IGetUserDto"),"."),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},'this.mediator.send("GetUserQuery");')),(0,s.kt)("p",{parentName:"admonition"},"Expected 2 arguments, but got 1."),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},'this.mediator.send("GetUserQuery", {});')),(0,s.kt)("p",{parentName:"admonition"},"Property ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," is missing in type ",(0,s.kt)("inlineCode",{parentName:"p"},"{}")," but required in type ",(0,s.kt)("inlineCode",{parentName:"p"},"IGetUserDto"),".")),(0,s.kt)("h6",{id:"srcapplicationuserget-user-queryts"},"src/application/user/get-user-query.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    ACTION_RESULT,\n    MediatorResultSuccess,\n    MediatorResultFailure,\n} from '@lindeneg/funkallero';\nimport BaseAction from '@/application/base-action';\nimport type { IGetUserDto, IGetUserResponse } from '@/contracts/get-user';\n\nclass GetUserQuery extends BaseAction {\n    public async execute({ id }: IGetUserDto) {\n        const user = this.dataContext.userRepository.get(id);\n\n        if (!user)\n            return new MediatorResultFailure(ACTION_RESULT.ERROR_NOT_FOUND);\n\n        const userResponse: IGetUserResponse = {\n            id: user.id,\n            name: user.name,\n        };\n\n        return new MediatorResultSuccess(userResponse);\n    }\n}\n\nexport default GetUserQuery;\n")),(0,s.kt)("h2",{id:"create-user-command"},"Create User Command"),(0,s.kt)("p",null,"We'll look into validating the DTO later.. but not here in the application layer, we'll do it in the API layer."),(0,s.kt)("h6",{id:"srcapplicationusercreate-user-commandts"},"src/application/user/create-user-command.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    ACTION_RESULT,\n    MediatorResultSuccess,\n    MediatorResultFailure,\n} from '@lindeneg/funkallero';\nimport BaseAction from '@/application/base-action';\nimport type {\n    ICreateUserDto,\n    ICreateUserResponse,\n} from '@/contracts/create-user';\n\nclass CreateUserCommand extends BaseAction {\n    public async execute(dto: ICreateUserDto) {\n        const user = await this.dataContext.createUser(dto);\n\n        if (!user)\n            return new MediatorResultFailure(ACTION_RESULT.ERROR_NOT_FOUND);\n\n        const userResponse: ICreateUserResponse = {\n            id: user.id,\n        };\n\n        return new MediatorResultSuccess(\n            userResponse,\n            ACTION_RESULT.SUCCESS_CREATE\n        );\n    }\n}\n\nexport default CreateUserCommand;\n")))}d.isMDXComponent=!0}}]);