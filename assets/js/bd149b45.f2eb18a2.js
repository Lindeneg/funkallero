"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[605],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),c=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(a.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},v=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),v=o,f=u["".concat(a,".").concat(v)]||u[v]||d[v]||l;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var l=t.length,i=new Array(l);i[0]=v;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}v.displayName="MDXCreateElement"},2201:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const l={sidebar_position:4,description:"Set API versioning strategy"},i="Versioning",s={unversionedId:"extra/versioning",id:"extra/versioning",title:"Versioning",description:"Set API versioning strategy",source:"@site/docs/extra/4-versioning.md",sourceDirName:"extra",slug:"/extra/versioning",permalink:"/funkallero/docs/extra/versioning",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Set API versioning strategy"},sidebar:"tutorialSidebar",previous:{title:"Response Headers",permalink:"/funkallero/docs/extra/response-headers"}},a={},c=[{value:"Enable",id:"enable",level:2},{value:"Route Level",id:"route-level",level:2},{value:"Controller Level",id:"controller-level",level:2},{value:"Multiple Controllers",id:"multiple-controllers",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"versioning"},"Versioning"),(0,o.kt)("p",null,"Versioning can be set on either route level or controller level. Route level takes priority over controller and two strategies are supported.\nVersioning via ",(0,o.kt)("inlineCode",{parentName:"p"},"headers")," or via ",(0,o.kt)("inlineCode",{parentName:"p"},"URL"),"."),(0,o.kt)("h2",{id:"enable"},"Enable"),(0,o.kt)("p",null,"First of all, a versioning strategy should be specified and an versioning service can optionally be registered. If not, a default service will be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Funkallero.create({\n    // default: null\n    versioning: {\n        type: 'header', // can also be url\n        headerName: 'api-version',\n    },\n});\n")),(0,o.kt)("h2",{id:"route-level"},"Route Level"),(0,o.kt)("p",null,"All of the three handlers below have the same path and method, ",(0,o.kt)("inlineCode",{parentName:"p"},"GET /example/test"),", but which handler is run for any given request is determined - in this example - by the value of request header ",(0,o.kt)("inlineCode",{parentName:"p"},"api-version"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@controller('example')\nclass VersioningController extends Controller {\n    @httpGet('/test')\n    // will resolve if no api-version is provided\n    public async test() {\n        return new MediatorResultSuccess('No Version');\n    }\n\n    @httpGet('/test', { version: 'v2' })\n    public async testV2() {\n        // will resolve if api-version 'v2' is provided\n        return new MediatorResultSuccess('Version 2');\n    }\n\n    @httpGet('/test', { version: 'v3' })\n    public async testV3() {\n        // will resolve if api-version 'v3' is provided\n        return new MediatorResultSuccess('Version 3');\n    }\n}\n")),(0,o.kt)("h2",{id:"controller-level"},"Controller Level"),(0,o.kt)("p",null,"If versioning is added to a controller, that version propagates down to all handlers without versions. If handler already specifies version, then it will remain untouched."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@controller('example', 'v1')\nclass VersioningController extends Controller {\n    @httpGet('/test')\n    // will resolve if api-version 'v1' is provided\n    public async test() {\n        return new MediatorResultSuccess('Version 1');\n    }\n\n    @httpGet('/test', { version: 'v2' })\n    public async testV2() {\n        // will resolve if api-version 'v2' is provided\n        return new MediatorResultSuccess('Version 2');\n    }\n\n    @httpGet('/test', { version: 'v3' })\n    public async testV3() {\n        // will resolve if api-version 'v3' is provided\n        return new MediatorResultSuccess('Version 3');\n    }\n}\n")),(0,o.kt)("h2",{id:"multiple-controllers"},"Multiple Controllers"),(0,o.kt)("p",null,"Since it's possible to have multiple controllers with the same path, it becomes quite easy to segregate controllers by versioning."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@controller('example')\nclass VersioningController extends Controller {\n    @httpGet('/test')\n    // will resolve if no api-version is provided\n    public async test() {\n        return new MediatorResultSuccess('No Version');\n    }\n}\n\n@controller('example', 'v1')\nclass VersioningV1Controller extends Controller {\n    @httpGet('/test')\n    public async test() {\n        // will resolve if api-version 'v1' is provided\n        return new MediatorResultSuccess('Version 1');\n    }\n}\n\n@controller('example', 'v2')\nclass VersioningV2Controller extends Controller {\n    @httpGet('/test')\n    public async test() {\n        // will resolve if api-version 'v2' is provided\n        return new MediatorResultSuccess('Version 2');\n    }\n}\n")))}d.isMDXComponent=!0}}]);