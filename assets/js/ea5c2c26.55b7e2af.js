"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[70],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7794:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:2,description:"Setup authentication & authorization continued"},i="Guarding Routes Continued",s={unversionedId:"part-2/guarding-routes-contiuned",id:"part-2/guarding-routes-contiuned",title:"Guarding Routes Continued",description:"Setup authentication & authorization continued",source:"@site/docs/part-2/2-guarding-routes-contiuned.md",sourceDirName:"part-2",slug:"/part-2/guarding-routes-contiuned",permalink:"/funkallero/docs/part-2/guarding-routes-contiuned",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Setup authentication & authorization continued"},sidebar:"tutorialSidebar",previous:{title:"Guarding Routes",permalink:"/funkallero/docs/part-2/guarding-routes"},next:{title:"Test Guarded Routes",permalink:"/funkallero/docs/part-2/test-guarded-routes"}},c={},l=[{value:"Update Create User",id:"update-create-user",level:2},{value:"src/application/user/create-user-command.ts",id:"srcapplicationusercreate-user-commandts",level:6},{value:"Login User",id:"login-user",level:2},{value:"src/application/user/login-user-command.ts",id:"srcapplicationuserlogin-user-commandts",level:6},{value:"Update Data Context",id:"update-data-context",level:2},{value:"src/services/data-context-service.ts",id:"srcservicesdata-context-servicets",level:6},{value:"Use Auth Policies",id:"use-auth-policies",level:2},{value:"src/api/auth-controller.ts",id:"srcapiauth-controllerts",level:6},{value:"Next",id:"next",level:2}],u={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"guarding-routes-continued"},"Guarding Routes Continued"),(0,a.kt)("h2",{id:"update-create-user"},"Update Create User"),(0,a.kt)("p",null,"Update the create user action to satisfy the contract we updated in authentication part 1."),(0,a.kt)("p",null,"Now, we should return a token that has encoded the id and email of the created user. That also means, we need to inject the ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenService"),"."),(0,a.kt)("h6",{id:"srcapplicationusercreate-user-commandts"},"src/application/user/create-user-command.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    // diff-add-next-line\n    injectService,\n    ACTION_RESULT,\n    MediatorResultSuccess,\n    MediatorResultFailure,\n    // diff-add-next-line\n    type ITokenService,\n} from '@lindeneg/funkallero';\n// diff-add-next-line\nimport SERVICE from '@/enums/service';\nimport BaseAction from '@/application/base-action';\nimport type {\n    ICreateUserDto,\n    ICreateUserResponse,\n} from '@/contracts/create-user';\n\nclass CreateUserCommand extends BaseAction {\n    // diff-add-start\n    @injectService(SERVICE.TOKEN)\n    private readonly tokenService: ITokenService;\n    // diff-add-end\n\n    public async execute(dto: ICreateUserDto) {\n        const user = await this.dataContext.createUser(dto);\n\n        if (!user) {\n            return new MediatorResultFailure(\n                ACTION_RESULT.ERROR_INTERNAL_ERROR\n            );\n        }\n\n        const userResponse: ICreateUserResponse = {\n            id: user.id,\n            // diff-add-start\n            token: await this.tokenService.createToken({\n                id: user.id,\n                email: user.email,\n            }),\n            // diff-add-end\n        };\n\n        return new MediatorResultSuccess(\n            userResponse,\n            ACTION_RESULT.SUCCESS_CREATE\n        );\n    }\n}\n\nexport default CreateUserCommand;\n")),(0,a.kt)("h2",{id:"login-user"},"Login User"),(0,a.kt)("p",null,"Add a new login user action in the application layer."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"funkallero command login user --folder user\n")),(0,a.kt)("h6",{id:"srcapplicationuserlogin-user-commandts"},"src/application/user/login-user-command.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    ACTION_RESULT,\n    MediatorResultSuccess,\n    MediatorResultFailure,\n    injectService,\n    type ITokenService,\n} from '@lindeneg/funkallero';\nimport SERVICE from '@/enums/service';\nimport BaseAction from '@/application/base-action';\nimport type { ILoginUserDto, ILoginUserResponse } from '@/contracts/login-user';\n\nclass LoginUserCommand extends BaseAction {\n    @injectService(SERVICE.TOKEN)\n    private readonly tokenService: ITokenService;\n\n    public async execute(dto: ILoginUserDto) {\n        const user = Array.from(this.dataContext.userRepository.values()).find(\n            (e) => e.email === dto.email\n        );\n\n        if (!user) {\n            return new MediatorResultFailure(ACTION_RESULT.ERROR_NOT_FOUND);\n        }\n\n        const isPasswordValid = await this.tokenService.comparePassword(\n            dto.password,\n            user.password\n        );\n\n        if (!isPasswordValid) {\n            return new MediatorResultFailure(ACTION_RESULT.ERROR_NOT_FOUND);\n        }\n\n        const loginResponse: ILoginUserResponse = {\n            token: await this.tokenService.createToken({\n                id: user.id,\n                email: user.email,\n            }),\n        };\n\n        return new MediatorResultSuccess(loginResponse);\n    }\n}\n\nexport default LoginUserCommand;\n")),(0,a.kt)("h2",{id:"update-data-context"},"Update Data Context"),(0,a.kt)("p",null,"Hash password from new user. Inject and use ",(0,a.kt)("inlineCode",{parentName:"p"},"tokenService"),"."),(0,a.kt)("h6",{id:"srcservicesdata-context-servicets"},"src/services/data-context-service.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { randomUUID } from 'crypto';\nimport {\n    injectService,\n    SingletonService,\n    type ILoggerService,\n    type IDataContextService,\n    // diff-add-next-line\n    type ITokenService,\n} from '@lindeneg/funkallero';\nimport SERVICE from '@/enums/service';\nimport type User from '@/domain/user';\n// diff-add-next-line\nimport type { ICreateUserDto } from '@/contracts/create-user';\n\nclass DataContextService\n    extends SingletonService\n    implements IDataContextService\n{\n    @injectService(SERVICE.LOGGER)\n    private readonly logger: ILoggerService;\n\n    // diff-add-start\n    @injectService(SERVICE.TOKEN)\n    private readonly tokenService: ITokenService;\n    // diff-add-end\n\n    public readonly userRepository = new Map<User['id'], User>();\n\n    // diff-add-next-line\n    public async createUser(user: ICreateUserDto) {\n        const id = randomUUID();\n        const now = new Date();\n        const createdUser: User = {\n            ...user,\n            id,\n            createdAt: now,\n            updatedAt: now,\n            // diff-add-next-line\n            password: await this.tokenService.hashPassword(user.password),\n        };\n        this.userRepository.set(id, createdUser);\n        return createdUser;\n    }\n}\n\nexport default DataContextService;\n")),(0,a.kt)("h2",{id:"use-auth-policies"},"Use Auth Policies"),(0,a.kt)("p",null,"Add a new ",(0,a.kt)("inlineCode",{parentName:"p"},"auth")," controller."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"funkallero controller auth\n")),(0,a.kt)("h6",{id:"srcapiauth-controllerts"},"src/api/auth-controller.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    controller,\n    httpGet,\n    httpPost,\n    body,\n    auth,\n    MediatorResultSuccess,\n} from '@lindeneg/funkallero';\nimport BaseController from './base-controller';\nimport { loginUserSchema, type ILoginUserDto } from '@/contracts/login-user';\n\n@controller('auth')\nclass AuthController extends BaseController {\n    @httpPost('/login')\n    public async loginUser(@body(loginUserSchema) dto: ILoginUserDto) {\n        return this.mediator.send('LoginUserCommand', dto);\n    }\n\n    @httpGet('/guard')\n    @auth('authenticated')\n    public async mustBeAuthenticated() {\n        // this will only be executed if the auth policy is satisfied\n        return new MediatorResultSuccess('you are authenticated');\n    }\n\n    @httpGet('/miles')\n    @auth('name-is-miles-davis')\n    public async mustBeMilesDavis() {\n        // this will only be executed if the auth policy is satisfied\n        return new MediatorResultSuccess('you are miles davis');\n    }\n}\n")),(0,a.kt)("h2",{id:"next"},"Next"),(0,a.kt)("p",null,"Time to test it!"))}p.isMDXComponent=!0}}]);