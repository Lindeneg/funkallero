"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},25:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4,description:"Inject user context utilizing auth services and decorators"},i="Auth User Injection",s={unversionedId:"part-2/auth-user-injection",id:"part-2/auth-user-injection",title:"Auth User Injection",description:"Inject user context utilizing auth services and decorators",source:"@site/docs/part-2/4-auth-user-injection.md",sourceDirName:"part-2",slug:"/part-2/auth-user-injection",permalink:"/funkallero/docs/part-2/auth-user-injection",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Inject user context utilizing auth services and decorators"},sidebar:"tutorialSidebar",previous:{title:"Test Guarded Routes",permalink:"/funkallero/docs/part-2/test-guarded-routes"},next:{title:"Extra",permalink:"/funkallero/docs/category/extra"}},l={},u=[{value:"Auth Decorator",id:"auth-decorator",level:2},{value:"src/api/auth-controller.ts",id:"srcapiauth-controllerts",level:6},{value:"Test It",id:"test-it",level:2},{value:"stdout:",id:"stdout",level:5},{value:"stdout:",id:"stdout-1",level:5}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"auth-user-injection"},"Auth User Injection"),(0,a.kt)("p",null,"Suppose authentication context is needed within a controller itself. Say there is some action that expects a ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," and that id needs to come from the authenticated user."),(0,a.kt)("p",null,"Well, there's a few ways to do this. One could use ",(0,a.kt)("inlineCode",{parentName:"p"},"injectService")," decorator on authentication service and get access to the authenticated user that way."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@controller()\nclass SomeController extends BaseController {\n    @injectService(SERVICE.AUTHENTICATION)\n    private readonly authenticationService: IAuthenticationService;\n\n    @httpPatch()\n    public async updateBook(@body() payload: SomeDto) {\n        return this.mediator.send('UpdateBook', {\n            ...payload,\n            userId: await this.authenticationService.getUserIdSafe(),\n        });\n    }\n}\n")),(0,a.kt)("p",null,"That has a disadvantage though. If another handler was added to this controller, for example ",(0,a.kt)("inlineCode",{parentName:"p"},"getBooks")," and that handler does not make use of the authentication service,\nthen the service would still be injected, because it's scoped to the controller itself."),(0,a.kt)("p",null,"One solution would be to segregate controllers and have handlers within that consumes similar services. It is allowed for multiple controllers to have the same path and thus this solution works."),(0,a.kt)("p",null,"However, ",(0,a.kt)("inlineCode",{parentName:"p"},"auth")," decorator can also be used. It takes an additional argument that allows user injection scoped to handlers."),(0,a.kt)("h2",{id:"auth-decorator"},"Auth Decorator"),(0,a.kt)("h6",{id:"srcapiauth-controllerts"},"src/api/auth-controller.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n    controller,\n    httpGet,\n    httpPost,\n    body,\n    auth,\n    MediatorResultSuccess,\n} from '@lindeneg/funkallero';\nimport BaseController from './base-controller';\nimport { loginUserSchema, type ILoginUserDto } from '@/contracts/login-user';\n// diff-add-next-line\nimport type User from '@/domain/user';\n\n@controller('auth')\nclass AuthController extends BaseController {\n    // diff-add-start\n    private readonly userId: string;\n    private readonly user: User;\n    // diff-add-end\n\n    @httpPost('/login')\n    public async loginUser(@body(loginUserSchema) dto: ILoginUserDto) {\n        return this.mediator.send('LoginUserCommand', dto);\n    }\n\n    @httpGet('/guard')\n    // 'id' property from authenticated user injected into property 'userId'\n    // diff-add-next-line\n    @auth('authenticated', { srcProperty: 'id', destProperty: 'userId' })\n    public async mustBeAuthenticated() {\n        // diff-add-start\n        this.logger.info({\n            msg: 'user injection on /guard',\n            // should be id of authenticated user\n            userId: this.userId,\n            // should be undefined\n            user: this.user,\n        });\n        // diff-add-end\n        // this will only be executed if the auth policy is satisfied\n        return new MediatorResultSuccess('you are authenticated');\n    }\n\n    @httpGet('/miles')\n    // everything from authenticated user injected into property 'user'\n    // diff-add-next-line\n    @auth('name-is-miles-davis', 'user')\n    public async mustBeMilesDavis() {\n        // diff-add-start\n        this.logger.info({\n            msg: 'user injection on /miles',\n            // should be undefined\n            userId: this.userId,\n            // should be user entity\n            user: this.user,\n        });\n        // diff-add-end\n        // this will only be executed if the auth policy is satisfied\n        return new MediatorResultSuccess('you are miles davis');\n    }\n}\n")),(0,a.kt)("h2",{id:"test-it"},"Test It"),(0,a.kt)("p",null,"Build the project again and start the server."),(0,a.kt)("p",null,"Create Miles."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:3000/api/user \\\n-d \'{"name":"Miles Davis", "email":"miles@davis.org", "password": "some-password"}\' \\\n-H "Content-Type: application/json" -X POST\n')),(0,a.kt)("p",null,"Use the token to send a request to guard endpoint. Watch the terminal where the server is running."),(0,a.kt)("p",null,"On this endpoint, we'd expect ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," to be defined but ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," to be undefined."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:3000/api/auth/guard \\\n-H "Authorization: Bearer MILES_TOKEN" -X GET\n')),(0,a.kt)("h5",{id:"stdout"},"stdout:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"user injection on /guard { userId: 'a4398777-0dad-49f8-a246-1a48c6b8d546', user: undefined }\n")),(0,a.kt)("p",null,"Lets try the other one, where we'd expect ",(0,a.kt)("inlineCode",{parentName:"p"},"userId")," to be undefined but ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," to be defined."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'curl http://localhost:3000/api/auth/miles \\\n-H "Authorization: Bearer MILES_TOKEN" -X GET\n')),(0,a.kt)("h5",{id:"stdout-1"},"stdout:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"user injection on /miles {\n  userId: undefined,\n  user: {\n    name: 'Miles Davis',\n    email: 'miles@davis.org',\n    password: HASHED_PASSWORD,\n    id: GENERATED_ID,\n    createdAt: DATETIME,\n    updatedAt: DATETIME\n  }\n}\n")))}p.isMDXComponent=!0}}]);