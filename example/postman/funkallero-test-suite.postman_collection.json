{
	"info": {
		"_postman_id": "d1899150-970d-4aad-9851-60e69a3f0688",
		"name": "Funkallero E2E Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14852340"
	},
	"item": [
		{
			"name": "Public Getters",
			"item": [
				{
					"name": "GetAllAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const authors = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains all authors', function() {\r",
									"    pm.expect(authors.length).eq(3);\r",
									"    pm.expect(authors[0].books.length).eq(2);\r",
									"    pm.expect(authors[1].books.length).eq(2);\r",
									"    pm.expect(authors[2].books.length).eq(2);\r",
									"\r",
									"    pm.collectionVariables.set('janeId', authors.find(e => e.name === \"Jane\").id);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetJaneAuthor\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/authors",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetJaneAuthor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const author = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains author jane', function() {\r",
									"    pm.expect(author.name).eq(\"Jane\");\r",
									"    pm.expect(author.books.length).eq(2);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetInvalidAuthor\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeId')});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/authors/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvalidAuthor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The requested resource could not be found.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetAllBooks\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/authors/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "nonsense"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const books = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains all books', function() {\r",
									"    pm.expect(books.length).eq(6);\r",
									"\r",
									"    const janeId = pm.collectionVariables.get('janeId');\r",
									"    const janeBook = books.find(e => e.author.id === janeId);\r",
									"    const nonJaneBook = books.find(e => e.author.id !== janeId);\r",
									"\r",
									"    pm.collectionVariables.set('janeBookId', janeBook.id);\r",
									"    pm.collectionVariables.set('foreignBookId', nonJaneBook.id);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetJaneBook\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetJaneBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const book = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains a book from author jane', function() {\r",
									"    pm.expect(book.name).match(/Book.+/);\r",
									"    pm.expect(book.description).match(/Book.+ description/);\r",
									"    pm.expect(book.author.name).equal(\"Jane\");\r",
									"    pm.expect(book.author.id).equal(pm.collectionVariables.get('janeId'));\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetInvalidBook\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetInvalidBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The requested resource could not be found.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteNonAuthAuthor\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "nonsense"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Non Auth Actions",
			"item": [
				{
					"name": "DeleteNonAuthAuthor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UpdateNonAuthAuthor\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/authors",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateNonAuthAuthor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteNonAuthBook\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authors",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNonAuthBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UpdateNonAuthBook\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateNonAuthBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"CreateNonAuthBook\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNonAuthBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"PostInvalidLogin\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"new name\",\r\n    \"description\": \"new description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Jane Actions",
			"item": [
				{
					"name": "PostInvalidLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The requested resource could not be found.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"PostLoginJane\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"asdsad\",\r\n    \"password\": \"asfsaf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostLoginJane",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UpdateJaneBook\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"jane@example.com\",\r\n    \"password\": \"jane-mock\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateJaneBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"VerifyUpdateJaneBook\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"NEW_TEST_DESCRIPTION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyUpdateJaneBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const book = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains updated book from author jane', function() {\r",
									"    pm.expect(book.name).match(/Book.+/);\r",
									"    pm.expect(book.description).equal(\"NEW_TEST_DESCRIPTION\");\r",
									"    pm.expect(book.author.name).equal(\"Jane\");\r",
									"    pm.expect(book.author.id).equal(pm.collectionVariables.get('janeId'));\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteJaneBook\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"NEW_TEST_DESCRIPTION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteJaneBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function() {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"VerifyDeleteJaneBook1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyDeleteJaneBook1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('janeBookId')});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"VerifyDeleteJaneBook2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"NEW_TEST_DESCRIPTION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyDeleteJaneBook2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const books = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response does not contain deleted book', function() {\r",
									"    pm.expect(books.length).eq(5);\r",
									"\r",
									"    const janeBookId = pm.collectionVariables.get('janeBookId');\r",
									"\r",
									"    const janeBook = books.find(e => e.id === janeBookId);\r",
									"\r",
									"    pm.expect(janeBook).to.be.undefined;\r",
									"\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"PostSignupInvalid1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"NEW_TEST_DESCRIPTION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cl Actions",
			"item": [
				{
					"name": "PostSignupInvalid1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const error = response.error[0];\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq(\"The requested action could not be exercised due to malformed syntax.\");\r",
									"    pm.expect(error.name).eq(\"String must contain at least 2 character(s)\");\r",
									"    pm.expect(error.email).eq(\"Required\");\r",
									"    pm.expect(error.password).eq(\"Required\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"PostSignupInvalid2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostSignupInvalid2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const error = response.error[0];\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq(\"The requested action could not be exercised due to malformed syntax.\");\r",
									"    pm.expect(error.name).eq(\"String must contain at least 2 character(s)\");\r",
									"    pm.expect(error.email).eq(\"Invalid email\");\r",
									"    pm.expect(error.password).eq(\"String must contain at least 6 character(s)\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"PostSignupCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostSignupCl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"VerifySignupCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"christian\",\r\n    \"email\": \"christian@lindeneg.org\",\r\n    \"password\": \"christian-mock\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifySignupCl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const authors = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains new author', function() {\r",
									"    const cl = authors.find(e => e.name === \"christian\");\r",
									"\r",
									"    pm.expect(cl).to.not.be.undefined;\r",
									"\r",
									"    pm.collectionVariables.set(\"clId\", cl.id);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"PostIllegalSignupCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"NEW_TEST_DESCRIPTION\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/authors",
							"host": [
								"{{url}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostIllegalSignupCl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function() {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The request was well-formed but not honored. Perhaps the action trying to be performed has already been done?\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"CreateInvalidBookCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"christian\",\r\n    \"email\": \"christian@lindeneg.org\",\r\n    \"password\": \"christian-mock\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateInvalidBookCl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const error = response.error[0];\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq(\"The requested action could not be exercised due to malformed syntax.\");\r",
									"    pm.expect(error.name).eq(\"String must contain at least 2 character(s)\");\r",
									"    pm.expect(error.description).eq(\"Required\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"CreateValidBookCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateValidBookCl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 201\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.collectionVariables.set(\"clBookId\", response.id);\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"VerifyCreateBookCl\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"christian book title\",\r\n    \"description\": \"christian book description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyCreateBookCl",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const books = pm.response.json();\r",
									"const clBookId = pm.collectionVariables.get(\"clBookId\");\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains new book', function() {\r",
									"    const clBook = books.find(e => e.id === clBookId);\r",
									"\r",
									"    pm.expect(clBook).to.not.be.undefined;\r",
									"    pm.expect(clBook.name).equal(\"christian book title\");\r",
									"    pm.expect(clBook.description).equal(\"christian book description\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UpdateForeignBook\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/books",
							"host": [
								"{{url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateForeignBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DeleteForeignBook\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('foreignBookId')});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteForeignBook",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq(\"The provided credentials are either invalid or has insufficient privilege to perform the requested action.\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"GetIncorrectHeader\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.url.variables.add({key: 'id', value: pm.collectionVariables.get('foreignBookId')});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/books/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"books",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Versioning",
			"item": [
				{
					"name": "GetIncorrectHeader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains error messages', function() {\r",
									"    pm.expect(response.message).eq('route not found for version whatever');\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTestV1\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: whatever\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test",
							"host": [
								"{{url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTestV1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v1 - a\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTestNoVersion\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v1\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test",
							"host": [
								"{{url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTestNoVersion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains no version', function() {\r",
									"    pm.expect(response).eq(\"No Version\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTest2V1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test",
							"host": [
								"{{url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTest2V1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v1 - b\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTestV2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v1\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test2",
							"host": [
								"{{url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTestV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v2 - d\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTestV3\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v2\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test",
							"host": [
								"{{url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTestV3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v3 - f\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTest2V2\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v3\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test",
							"host": [
								"{{url}}"
							],
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTest2V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v2 - e\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTest2V3\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v2\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test2",
							"host": [
								"{{url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTest2V3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v3 - c\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"GetTest2V4\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v3\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test2",
							"host": [
								"{{url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTest2V4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test('Response contains correct version', function() {\r",
									"    pm.expect(response).eq(\"v4 - g\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"ViewLogout\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add(\"api-version: v4\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/test2",
							"host": [
								"{{url}}"
							],
							"path": [
								"test2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Views",
			"item": [
				{
					"name": "ViewLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"ViewIndexNotLoggedIn\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "ViewIndexNotLoggedIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains html content type', function() {\r",
									"    pm.expect(contentType).match(/^text\\/html/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains login button', function() {\r",
									"    pm.expect(pm.response.text()).contains('<a href=\"/login\" class=\"pure-menu-link\">Login</a>');\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"ViewLogin\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000"
						}
					},
					"response": []
				},
				{
					"name": "ViewLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"ViewIndexLoggedIn\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"jane@example.com\",\r\n    \"password\": \"jane-mock\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ViewIndexLoggedIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"const text = pm.response.text();\r",
									"\r",
									"pm.test('Response contains html content type', function() {\r",
									"    pm.expect(contentType).match(/^text\\/html/);\r",
									"});\r",
									"\r",
									"pm.test('Response does not contain login button', function() {\r",
									"    pm.expect(text).not.contains('<a href=\"/login\" class=\"pure-menu-link\">Login</a>');\r",
									"});\r",
									"\r",
									"pm.test('Response contains logout button', function() {\r",
									"    pm.expect(text).contains('<button id=\"logout-btn\" class=\"pure-button\">Logout</button>');\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"View404HTML\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000"
						}
					},
					"response": []
				},
				{
					"name": "View404HTML",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"const text = pm.response.text();\r",
									"\r",
									"pm.test('Response contains html content type', function() {\r",
									"    pm.expect(contentType).match(/^text\\/html/);\r",
									"});\r",
									"\r",
									"pm.test('Response text contains header', function() {\r",
									"    pm.expect(text).contains('<h2>404 - An Error Occurred</h2>');\r",
									"});\r",
									"\r",
									"pm.test('Response text contains description', function() {\r",
									"    pm.expect(text).contains('<p>The requested resource could not be found.</p>');\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(\"View404Json\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/invalid",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "View404Json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"const message = pm.response.json().message;\r",
									"const contentType = pm.response.headers.get('Content-Type');\r",
									"\r",
									"pm.test('Response contains json content type', function() {\r",
									"    pm.expect(contentType).match(/^application\\/json/);\r",
									"});\r",
									"\r",
									"pm.test('Response contains error message', function() {\r",
									"    pm.expect(message).eq(\"The requested resource could not be found.\");\r",
									"});\r",
									"\r",
									"\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/invalid",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"invalid"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 250ms\", function() {",
					"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.collectionVariables.get('maxAcceptableResponseTimeInMs')));",
					"});",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:3000/api"
		},
		{
			"key": "maxAcceptableResponseTimeInMs",
			"value": "250",
			"type": "string"
		},
		{
			"key": "janeId",
			"value": "",
			"type": "string"
		},
		{
			"key": "janeBookId",
			"value": "",
			"type": "string"
		},
		{
			"key": "foreignBookId",
			"value": "",
			"type": "string"
		},
		{
			"key": "clId",
			"value": "",
			"type": "string"
		},
		{
			"key": "clBookId",
			"value": "",
			"type": "string"
		}
	]
}